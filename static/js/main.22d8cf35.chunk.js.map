{"version":3,"sources":["components/NewTodo.js","components/TodoItem.js","components/TodoList.js","components/const/Filter.js","components/TodoFooter.js","App.js","index.js"],"names":["NewTodo","state","title","handleChange","value","target","setState","handleSubmit","event","preventDefault","addTodo","props","trim","id","uuid","completed","this","onSubmit","type","className","placeholder","onChange","Component","TodoItem","todo","deleteTodo","checkTodo","checked","htmlFor","onClick","TodoList","todos","map","key","filterTypes","all","active","Footer","count","activeFilter","onSetFilter","onClearCompleted","Object","values","filter","App","prevState","todoId","clearAllCompleted","setFilter","filterTodos","toggleAll","every","storedTodos","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filteredTodos","checkComplete","length","ReactDOM","render","document","getElementById"],"mappings":"uTAIaA,EAAb,2MACEC,MAAQ,CACNC,MAAO,IAFX,EAKEC,aAAe,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MAC1B,EAAKE,SAAS,CACZJ,MAAOE,KAPb,EAWEG,aAAe,SAACC,GACdA,EAAMC,iBADkB,IAGhBP,EAAU,EAAKD,MAAfC,MACAQ,EAAY,EAAKC,MAAjBD,QAEa,KAAjBR,EAAMU,SAIVF,EAAQ,CACNR,QACAW,GAAIC,iBACJC,WAAW,IAGb,EAAKT,SAAS,CACZJ,MAAO,OA5Bb,wEAgCY,IACAA,EAAUc,KAAKf,MAAfC,MAER,OACE,0BAAMe,SAAUD,KAAKT,cACnB,2BACEW,KAAK,OACLC,UAAU,WACVC,YAAY,yBACZhB,MAAOF,EACPmB,SAAUL,KAAKb,oBA1CzB,GAA6BmB,aCDhBC,EAAW,SAACZ,GAAW,IAC1Ba,EAAgCb,EAAhCa,KAAMC,EAA0Bd,EAA1Bc,WAAYC,EAAcf,EAAde,UAE1B,OACE,wBAAIP,UAAWK,EAAKT,WAAa,aAC/B,yBAAKI,UAAU,QACb,2BACED,KAAK,WACLC,UAAU,SACVN,GAAIW,EAAKX,GACTQ,SAAU,SAAAb,GAAK,OAAIkB,EAAUlB,EAAMH,OAAOsB,UAC1CA,QAASH,EAAKT,YAEhB,2BACEa,QAASJ,EAAKX,GACdM,UAAWK,EAAKT,WAAa,WAE5BS,EAAKtB,OAER,4BACEgB,KAAK,SACLC,UAAU,UACVU,QAASJ,KAGb,2BAAOP,KAAK,OAAOC,UAAU,WCxBtBW,EAAW,SAACnB,GAAW,IAEhCoB,EAGEpB,EAHFoB,MACAN,EAEEd,EAFFc,WACAC,EACEf,EADFe,UAGF,OACE,wBAAIP,UAAU,aACXY,EAAMC,KAAI,SAAAR,GAAI,OACb,kBAAC,EAAD,CACES,IAAKT,EAAKX,GACVW,KAAMA,EACNC,WAAY,kBAAMA,EAAWD,EAAKX,KAClCa,UAAW,SAAAC,GAAO,OAAID,EAAUF,EAAKX,GAAIc,WClBtCO,EAAc,CACzBC,IAAK,MACLC,OAAQ,SACRrB,UAAW,aCCAsB,EAAS,SAAC1B,GAAW,IAE9B2B,EAIE3B,EAJF2B,MACAC,EAGE5B,EAHF4B,aACAC,EAEE7B,EAFF6B,YACAC,EACE9B,EADF8B,iBAGF,OACE,4BAAQtB,UAAU,UAChB,0BAAMA,UAAU,cAAhB,UACMmB,EADN,gBAIA,wBAAInB,UAAU,WACXuB,OAAOC,OAAOT,GAAaF,KAAI,SAAAY,GAAM,OACpC,wBAAIX,IAAKW,GACP,4BACE1B,KAAK,SACLC,UAAWoB,IAAiBK,GAAU,WACtCf,QAAS,kBAAMW,EAAYI,KAE1BA,QAMT,4BACE1B,KAAK,SACLC,UAAU,kBACVU,QAASY,GAHX,qBCmHSI,E,2MA5Ib5C,MAAQ,CACN8B,MAAO,GACPQ,aAAcL,EAAYC,K,EAmB5BzB,QAAU,SAACc,GACT,EAAKlB,UAAS,SAAAwC,GAAS,MAAK,CAC1Bf,MAAM,GAAD,mBAAMe,EAAUf,OAAhB,CAAuBP,S,EAIhCC,WAAa,SAACsB,GACZ,EAAKzC,UAAS,SAAAwC,GAAS,MAAK,CAC1Bf,MAAOe,EAAUf,MAAMa,QAAO,SAAApB,GAAI,OAAIA,EAAKX,KAAOkC,U,EAItDC,kBAAoB,WAClB,EAAK1C,UAAS,SAAAwC,GAAS,MAAK,CAC1Bf,MAAOe,EAAUf,MAAMa,QAAO,SAAApB,GAAI,OAAKA,EAAKT,kB,EAIhDkC,UAAY,SAACL,GACX,EAAKtC,SAAS,CACZiC,aAAcK,K,EAIlBM,YAAc,WAAO,IAAD,EACc,EAAKjD,MAA7BsC,EADU,EACVA,aAAcR,EADJ,EACIA,MAEtB,OAAQQ,GACN,KAAKL,EAAYE,OACf,OAAOL,EAAMa,QAAO,SAAApB,GAAI,OAAKA,EAAKT,aACpC,KAAKmB,EAAYnB,UACf,OAAOgB,EAAMa,QAAO,SAAApB,GAAI,OAAIA,EAAKT,aACnC,KAAKmB,EAAYC,IAEjB,QACE,OAAO,YAAIJ,K,EAIjBL,UAAY,SAACb,EAAIc,GACf,EAAKrB,UAAS,SAAAwC,GAAS,MAAK,CAC1Bf,MAAOe,EAAUf,MAAMC,KAAI,SAACR,GAC1B,OAAIA,EAAKX,KAAOA,EACPW,EAGF,eACFA,EADL,CAEET,UAAWY,Y,EAMnBwB,UAAY,WAAO,IACTpB,EAAU,EAAK9B,MAAf8B,MAER,EAAKzB,UAAS,SAACwC,GACb,OAAIf,EAAMqB,OAAM,SAAA5B,GAAI,OAAIA,EAAKT,aACpB,CACLgB,MAAOe,EAAUf,MAAMC,KAAI,SAAAR,GAAI,sBAC1BA,EAD0B,CAE7BT,WAAW,QAKV,CACLgB,MAAOe,EAAUf,MAAMC,KAAI,SAAAR,GAAI,sBAC1BA,EAD0B,CAE7BT,WAAW,Y,mFArFjB,IAAMsC,EAAcC,aAAaC,QAAQ,SAEzC,GAAIF,EAAa,CACf,IAAMtB,EAAQyB,KAAKC,MAAMJ,GAEzBrC,KAAKV,SAAS,CAAEyB,a,yCAID2B,EAAWZ,GACxBA,EAAUf,QAAUf,KAAKf,MAAM8B,OACjCuB,aAAaK,QAAQ,QAASH,KAAKI,UAAU5C,KAAKf,MAAM8B,U,+BAgFlD,IAAD,EACyBf,KAAKf,MAA7B8B,EADD,EACCA,MAAOQ,EADR,EACQA,aACTsB,EAAgB7C,KAAKkC,cAErBY,EAAgB/B,EAAMqB,OAAM,SAAA5B,GAAI,OAAIA,EAAKT,aACzCuB,EAAQP,EAAMa,QAAO,SAAApB,GAAI,OAAKA,EAAKT,aAAWgD,OAEpD,OACE,6BAAS5C,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,kBAAC,EAAD,CAAST,QAASM,KAAKN,WAGzB,6BAASS,UAAU,QACjB,2BACED,KAAK,WACLL,GAAG,aACHM,UAAU,aACVE,SAAUL,KAAKmC,UACfxB,QAASmC,IAGX,2BAAOlC,QAAQ,cAAf,wBAEA,kBAAC,EAAD,CACEG,MAAO8B,EACPpC,WAAYT,KAAKS,WACjBC,UAAWV,KAAKU,aAIpB,kBAAC,EAAD,CACEY,MAAOA,EACPC,aAAcA,EACdC,YAAaxB,KAAKiC,UAClBR,iBAAkBzB,KAAKgC,yB,GAtIf1B,aCAlB0C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.22d8cf35.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { uuid } from 'uuidv4';\n\nexport class NewTodo extends Component {\n  state = {\n    title: '',\n  }\n\n  handleChange = ({ target: { value } }) => {\n    this.setState({\n      title: value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { title } = this.state;\n    const { addTodo } = this.props;\n\n    if (title.trim() === '') {\n      return;\n    }\n\n    addTodo({\n      title,\n      id: uuid(),\n      completed: false,\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = (props) => {\n  const { todo, deleteTodo, checkTodo } = props;\n\n  return (\n    <li className={todo.completed && 'completed'}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          onChange={event => checkTodo(event.target.checked)}\n          checked={todo.completed}\n        />\n        <label\n          htmlFor={todo.id}\n          className={todo.completed && 'checked'}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={deleteTodo}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    deleteTodo,\n    checkTodo,\n  } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          deleteTodo={() => deleteTodo(todo.id)}\n          checkTodo={checked => checkTodo(todo.id, checked)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n};\n","export const filterTypes = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { filterTypes } from './const/Filter';\n\nexport const Footer = (props) => {\n  const {\n    count,\n    activeFilter,\n    onSetFilter,\n    onClearCompleted,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${count} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        {Object.values(filterTypes).map(filter => (\n          <li key={filter}>\n            <button\n              type=\"button\"\n              className={activeFilter === filter && 'selected'}\n              onClick={() => onSetFilter(filter)}\n            >\n              {filter}\n            </button>\n          </li>\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  count: PropTypes.number.isRequired,\n  activeFilter: PropTypes.string.isRequired,\n  onSetFilter: PropTypes.func.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { NewTodo } from './components/NewTodo';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/TodoFooter';\nimport { filterTypes } from './components/const/Filter';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    activeFilter: filterTypes.all,\n  }\n\n  componentDidMount() {\n    const storedTodos = localStorage.getItem('todos');\n\n    if (storedTodos) {\n      const todos = JSON.parse(storedTodos);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  setFilter = (filter) => {\n    this.setState({\n      activeFilter: filter,\n    });\n  }\n\n  filterTodos = () => {\n    const { activeFilter, todos } = this.state;\n\n    switch (activeFilter) {\n      case filterTypes.active:\n        return todos.filter(todo => !todo.completed);\n      case filterTypes.completed:\n        return todos.filter(todo => todo.completed);\n      case filterTypes.all:\n        return [...todos];\n      default:\n        return [...todos];\n    }\n  }\n\n  checkTodo = (id, checked) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: checked,\n        };\n      }),\n    }));\n  }\n\n  toggleAll = () => {\n    const { todos } = this.state;\n\n    this.setState((prevState) => {\n      if (todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  }\n\n  render() {\n    const { todos, activeFilter } = this.state;\n    const filteredTodos = this.filterTodos();\n\n    const checkComplete = todos.every(todo => todo.completed);\n    const count = todos.filter(todo => !todo.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAll}\n            checked={checkComplete}\n\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            todos={filteredTodos}\n            deleteTodo={this.deleteTodo}\n            checkTodo={this.checkTodo}\n          />\n        </section>\n\n        <Footer\n          count={count}\n          activeFilter={activeFilter}\n          onSetFilter={this.setFilter}\n          onClearCompleted={this.clearAllCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}