{"version":3,"sources":["components/NewTodo.js","components/TodoItem.js","components/TodoList.js","components/Filter.js","components/TodoFooter.js","App.js","index.js"],"names":["NewTodo","state","title","handleChange","value","target","setState","handleSubmit","event","preventDefault","addTodo","props","trim","id","uuid","completed","this","onSubmit","type","className","placeholder","onChange","Component","TodoItem","todo","deleteTodo","checkTodo","cn","checked","htmlFor","onClick","TodoList","filteredTodos","map","key","filterTypes","all","active","Footer","todos","activeFilter","onSetFilter","onClearCompleted","quantity","filter","length","Object","values","href","App","prevState","todoId","clearAllCompleted","setFilter","filterTodos","toggleAll","every","storedTodos","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","checkComplete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.987191a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { uuid } from 'uuidv4';\n\nexport class NewTodo extends Component {\n  state = {\n    title: '',\n  }\n\n  handleChange = ({ target: { value } }) => {\n    this.setState({\n      title: value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { title } = this.state;\n    const { addTodo } = this.props;\n\n    if (title.trim() === '') {\n      return;\n    }\n\n    addTodo({\n      title,\n      id: uuid(),\n      completed: false,\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const TodoItem = (props) => {\n  const { todo, deleteTodo, checkTodo } = props;\n\n  return (\n    <li className={cn(todo.completed && 'completed')}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          onChange={checkTodo}\n          checked={todo.completed}\n        />\n        <label\n          htmlFor={todo.id}\n          className={cn(todo.completed && 'checked')}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={deleteTodo}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    filteredTodos,\n    deleteTodo,\n    checkTodo,\n  } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {filteredTodos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          deleteTodo={() => deleteTodo(todo.id)}\n          checkTodo={() => checkTodo(todo.id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n};\n","export const filterTypes = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { filterTypes } from './Filter';\n\nexport const Footer = (props) => {\n  const {\n    todos,\n    activeFilter,\n    onSetFilter,\n    onClearCompleted,\n  } = props;\n\n  const quantity = todos.filter(todo => !todo.completed).length;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${quantity} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        {Object.values(filterTypes).map(filter => (\n          <li key={filter}>\n            <a\n              href={`#/${filter}`}\n              className={cn(activeFilter === filter && 'selected')}\n              onClick={() => onSetFilter(filter)}\n            >\n              {filter}\n            </a>\n          </li>\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  activeFilter: PropTypes.string.isRequired,\n  onSetFilter: PropTypes.func.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { NewTodo } from './components/NewTodo';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/TodoFooter';\nimport { filterTypes } from './components/Filter';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    activeFilter: filterTypes.all,\n  }\n\n  componentDidMount() {\n    const storedTodos = localStorage.getItem('todos');\n\n    if (storedTodos) {\n      const todos = JSON.parse(storedTodos);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  setFilter = (filter) => {\n    this.setState({\n      activeFilter: filter,\n    });\n  }\n\n  filterTodos = () => {\n    const { activeFilter, todos } = this.state;\n\n    switch (activeFilter) {\n      case filterTypes.active:\n        return todos.filter(todo => !todo.completed);\n      case filterTypes.completed:\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos.filter(todo => todo.id);\n    }\n  }\n\n  checkTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  toggleAll = () => {\n    const { todos } = this.state;\n\n    this.setState((prevState) => {\n      if (todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  }\n\n  render() {\n    const { todos, activeFilter } = this.state;\n    const filteredTodos = this.filterTodos();\n\n    const checkComplete = todos.every(todo => todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAll}\n            checked={checkComplete}\n\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            todos={todos}\n            filteredTodos={filteredTodos}\n            deleteTodo={this.deleteTodo}\n            checkTodo={this.checkTodo}\n          />\n        </section>\n\n        <Footer\n          todos={todos}\n          activeFilter={activeFilter}\n          onSetFilter={this.setFilter}\n          onClearCompleted={this.clearAllCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}